import numpy as np


def generate_data():
    f_num = 300
    g_num = 60
    # f_id =
    # left = np.random.uniform(0, total_time - time_width, f_num).astype(int)
    # delta = np.fabs(np.random.normal(time_width, 1, f_num)).astype(int)
    # right = left + delta
    flight = [
        (0, 1162, 1213),
        (1, 257, 306),
        (2, 809, 857),
        (3, 1381, 1431),
        (4, 1377, 1425),
        (5, 878, 929),
        (6, 42, 91),
        (7, 50, 99),
        (8, 1184, 1232),
        (9, 326, 376),
        (10, 1025, 1075),
        (11, 289, 337),
        (12, 1262, 1309),
        (13, 334, 383),
        (14, 1334, 1382),
        (15, 992, 1041),
        (16, 662, 712),
        (17, 1109, 1160),
        (18, 1281, 1331),
        (19, 467, 517),
        (20, 355, 403),
        (21, 155, 203),
        (22, 139, 188),
        (23, 76, 123),
        (24, 462, 512),
        (25, 438, 487),
        (26, 490, 539),
        (27, 959, 1008),
        (28, 399, 448),
        (29, 1164, 1213),
        (30, 605, 655),
        (31, 1319, 1369),
        (32, 142, 194),
        (33, 619, 668),
        (34, 737, 785),
        (35, 1274, 1324),
        (36, 278, 327),
        (37, 1132, 1181),
        (38, 1215, 1264),
        (39, 334, 383),
        (40, 1312, 1361),
        (41, 524, 575),
        (42, 8, 57),
        (43, 1359, 1408),
        (44, 493, 542),
        (45, 1145, 1194),
        (46, 13, 62),
        (47, 819, 868),
        (48, 146, 196),
        (49, 1142, 1191),
        (50, 664, 714),
        (51, 699, 749),
        (52, 667, 716),
        (53, 1136, 1186),
        (54, 955, 1004),
        (55, 1385, 1435),
        (56, 1242, 1292),
        (57, 169, 219),
        (58, 365, 415),
        (59, 775, 824),
        (60, 1005, 1054),
        (61, 1112, 1162),
        (62, 940, 990),
        (63, 388, 436),
        (64, 4, 52),
        (65, 438, 486),
        (66, 537, 588),
        (67, 1174, 1224),
        (68, 295, 344),
        (69, 350, 399),
        (70, 519, 569),
        (71, 954, 1004),
        (72, 1339, 1388),
        (73, 716, 765),
        (74, 1323, 1371),
        (75, 1094, 1142),
        (76, 456, 505),
        (77, 504, 553),
        (78, 1026, 1076),
        (79, 1130, 1181),
        (80, 592, 641),
        (81, 871, 919),
        (82, 103, 154),
        (83, 980, 1030),
        (84, 53, 102),
        (85, 476, 524),
        (86, 1198, 1248),
        (87, 787, 837),
        (88, 371, 421),
        (89, 839, 888),
        (90, 367, 417),
        (91, 1205, 1255),
        (92, 467, 516),
        (93, 132, 181),
        (94, 1172, 1220),
        (95, 682, 730),
        (96, 1308, 1356),
        (97, 774, 822),
        (98, 486, 535),
        (99, 173, 221),
        (100, 788, 837),
        (101, 848, 897),
        (102, 94, 143),
        (103, 22, 71),
        (104, 844, 894),
        (105, 602, 651),
        (106, 616, 666),
        (107, 1030, 1079),
        (108, 949, 1000),
        (109, 1000, 1051),
        (110, 1215, 1265),
        (111, 293, 342),
        (112, 500, 549),
        (113, 454, 504),
        (114, 938, 987),
        (115, 1252, 1301),
        (116, 738, 787),
        (117, 250, 299),
        (118, 454, 504),
        (119, 3, 53),
        (120, 823, 872),
        (121, 92, 143),
        (122, 790, 842),
        (123, 1388, 1439),
        (124, 827, 877),
        (125, 441, 490),
        (126, 1220, 1270),
        (127, 1114, 1163),
        (128, 1153, 1202),
        (129, 974, 1024),
        (130, 558, 609),
        (131, 182, 231),
        (132, 281, 330),
        (133, 633, 684),
        (134, 555, 603),
        (135, 1170, 1219),
        (136, 1371, 1420),
        (137, 234, 285),
        (138, 330, 380),
        (139, 960, 1010),
        (140, 742, 791),
        (141, 680, 729),
        (142, 854, 905),
        (143, 1125, 1175),
        (144, 1114, 1164),
        (145, 196, 247),
        (146, 275, 324),
        (147, 185, 233),
        (148, 731, 781),
        (149, 839, 889),
        (150, 265, 315),
        (151, 409, 458),
        (152, 934, 984),
        (153, 735, 784),
        (154, 1069, 1119),
        (155, 820, 869),
        (156, 1285, 1334),
        (157, 168, 218),
        (158, 910, 959),
        (159, 558, 607),
        (160, 647, 696),
        (161, 729, 776),
        (162, 1320, 1368),
        (163, 1014, 1064),
        (164, 867, 917),
        (165, 737, 788),
        (166, 797, 847),
        (167, 963, 1012),
        (168, 317, 366),
        (169, 334, 383),
        (170, 1244, 1295),
        (171, 1118, 1168),
        (172, 711, 759),
        (173, 1080, 1130),
        (174, 977, 1027),
        (175, 491, 540),
        (176, 112, 162),
        (177, 528, 577),
        (178, 906, 956),
        (179, 445, 494),
        (180, 381, 432),
        (181, 427, 476),
        (182, 358, 406),
        (183, 290, 339),
        (184, 443, 493),
        (185, 354, 403),
        (186, 471, 522),
        (187, 135, 185),
        (188, 96, 145),
        (189, 1042, 1091),
        (190, 869, 919),
        (191, 28, 77),
        (192, 1116, 1166),
        (193, 1096, 1146),
        (194, 73, 122),
        (195, 50, 99),
        (196, 633, 683),
        (197, 732, 782),
        (198, 1147, 1196),
        (199, 458, 507),
        (200, 843, 892),
        (201, 167, 215),
        (202, 420, 468),
        (203, 883, 933),
        (204, 632, 682),
        (205, 186, 235),
        (206, 605, 655),
        (207, 1168, 1219),
        (208, 1009, 1058),
        (209, 317, 365),
        (210, 1367, 1416),
        (211, 1360, 1409),
        (212, 830, 880),
        (213, 1082, 1131),
        (214, 626, 673),
        (215, 974, 1024),
        (216, 611, 661),
        (217, 146, 196),
        (218, 918, 968),
        (219, 1120, 1169),
        (220, 1332, 1381),
        (221, 305, 354),
        (222, 0, 50),
        (223, 128, 179),
        (224, 97, 146),
        (225, 1294, 1344),
        (226, 940, 989),
        (227, 644, 692),
        (228, 767, 817),
        (229, 463, 512),
        (230, 55, 104),
        (231, 870, 920),
        (232, 1106, 1154),
        (233, 1122, 1170),
        (234, 978, 1026),
        (235, 1276, 1327),
        (236, 1056, 1105),
        (237, 1280, 1331),
        (238, 338, 385),
        (239, 908, 958),
        (240, 1017, 1064),
        (241, 144, 193),
        (242, 1138, 1186),
        (243, 778, 829),
        (244, 1341, 1392),
        (245, 651, 701),
        (246, 1373, 1423),
        (247, 286, 337),
        (248, 365, 415),
        (249, 463, 512),
        (250, 21, 71),
        (251, 238, 288),
        (252, 660, 708),
        (253, 733, 783),
        (254, 188, 236),
        (255, 911, 959),
        (256, 75, 126),
        (257, 922, 970),
        (258, 873, 924),
        (259, 460, 510),
        (260, 283, 334),
        (261, 1371, 1421),
        (262, 844, 896),
        (263, 1144, 1195),
        (264, 1096, 1145),
        (265, 425, 472),
        (266, 485, 534),
        (267, 719, 767),
        (268, 1325, 1374),
        (269, 455, 506),
        (270, 3, 54),
        (271, 57, 105),
        (272, 181, 231),
        (273, 358, 406),
        (274, 825, 873),
        (275, 1206, 1258),
        (276, 718, 768),
        (277, 1293, 1342),
        (278, 773, 824),
        (279, 321, 371),
        (280, 282, 331),
        (281, 301, 348),
        (282, 1139, 1187),
        (283, 903, 953),
        (284, 1003, 1053),
        (285, 1286, 1334),
        (286, 1176, 1226),
        (287, 507, 557),
        (288, 1171, 1221),
        (289, 416, 464),
        (290, 104, 153),
        (291, 1271, 1320),
        (292, 1106, 1156),
        (293, 804, 854),
        (294, 272, 322),
        (295, 1215, 1265),
        (296, 980, 1028),
        (297, 913, 962),
        (298, 798, 849),
        (299, 480, 532),
    ]  # 生成停机位数据

    stand = np.array([i for i in range(g_num)])
    # print("stand", stand)
    GB = np.array([i for i in range(int(np.ceil(g_num / 2)))])

    return flight, stand, GB


def sort_by_left(e):
    return e[1]


def sort_by_right(e):
    return e[2]


def make_subset(flight):
    tu = 15
    tp = 10
    ts = 10
    flight.sort(key=sort_by_left)

    FUS = []
    tag = [0 for _ in range(len(flight))]
    for i in range(len(flight)):
        FT = set()
        for j in range(i):
            if flight[i][1] - flight[i - j - 1][2] < tu:
                FT.add(flight[i - j - 1])
        FT.add(flight[i])
        FUS.append(FT)
    for i in range(len(flight)):
        for j in range(len(flight)):
            if i == j:
                continue
            if FUS[i].issubset(FUS[j]):
                tag[i] = 1
                break

    FUS = [FUS[i] for i in range(len(flight)) if tag[i] == 0]
    # print("FUS", FUS)

    flight.sort(key=sort_by_right)
    FPS = []
    tag = [0 for _ in range(len(flight))]
    for i in range(len(flight)):
        FT = set()
        for j in range(i):
            if flight[i][2] - flight[i - j - 1][2] < tp:
                FT.add(flight[i - j - 1])
            else:
                break
        FT.add(flight[i])
        FPS.append(FT)
    for i in range(len(flight)):
        for j in range(len(flight)):
            if i == j:
                continue
            if FPS[i].issubset(FPS[j]):
                tag[i] = 1
                break
    FPS = [FPS[i] for i in range(len(flight)) if tag[i] == 0]

    flight.sort(key=sort_by_right)
    FSS = []
    tag = [0 for _ in range(len(flight))]
    for i in range(len(flight)):
        FT = set()
        for j in range(i):
            if flight[i][2] - flight[i - j - 1][2] < ts:
                FT.add(flight[i - j - 1])
        FT.add(flight[i])
        FSS.append(FT)
    for i in range(len(flight)):
        for j in range(len(flight)):
            if i == j:
                continue
            if FSS[i].issubset(FSS[j]):
                tag[i] = 1
                break
    FSS = [FSS[i] for i in range(len(flight)) if tag[i] == 0]

    return FUS, FPS, FSS


def main():
    F, G, GB = generate_data()
    FUS, FPS, FSS = make_subset(F)


if __name__ == "__main__":
    main()
